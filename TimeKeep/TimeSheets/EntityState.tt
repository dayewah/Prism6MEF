<#
/*----------------------------------------------------------------------------------------------
    Template: Generates C# code for Entities
    Author: Daniel Ayewah
    Links: 
  		MSDN about developing T4 files	:	http://msdn.microsoft.com/en-us/library/dd820620.aspx 
  		Tangible T4 Editor				:	http://t4-editor.tangible-engineering.com/blog/how-to-generate-multiple-output-files-from-a-single-t4-template.html
	Instructions:
		-paste this file into the models folder with the model entities
		-use GenerateState attribute to mark classes whose state is to be generated
		-build project so that its assembly is placed at the $(TargetPath)
		-save file to generate
  ----------------------------------------------------------------------------------------------
*/
#>
<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)\CodeGen\bin\Debug\CodeGen.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="CodeGen.State" #> 
<#@ include file="$(SolutionDir)\CodeGen\TemplateFileManagerV2.1.ttinclude"		#>
<# 
	//Uncomment the line below to debug template in another visual studio instance
	//System.Diagnostics.Debugger.Launch();
	
#>
<#
	var manager = TemplateFileManager.Create(this);
	string fileNamespace = (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");

    foreach (Type modelType in GetModelTypes())
    {
		var className=modelType.Name + "State";
		manager.StartNewFile(className + ".cs");
#>		 
using System; 
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.ObjectModel;
using Common.DDD;

namespace <#= fileNamespace #>
{
	public class <#= className #> : Entity
    {
<#
        foreach (PropertyInfo prop in modelType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.DeclaredOnly))
        {
			var name=prop.Name;
			var type=prop.PropertyType;
			if(name=="State") continue;
			var complexType=type.IsValueType||type==typeof(string)?false:true;

            if (complexType)
            {
                foreach (PropertyInfo prop2 in type.GetProperties())
                {
					var name2=type.Name + "_" + prop2.Name;
					var type2=prop2.PropertyType;
					WriteProperty(name2,type2.Name);
                }
            }
            else
            {
				WriteProperty(name,type.Name);
            }
        }

#>
	}
}
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
<#
    }
manager.Process();
	
#>
<#+
  // Insert any template procedures here

private IEnumerable<Type> GetModelTypes()
{
	var pathh = this.Host.ResolveAssemblyReference("$(TargetPath)");
	var asm = Assembly.LoadFrom(pathh);
	var types=asm.GetTypes()
			.Where(x=>Attribute.IsDefined(x, typeof(GenerateStateAttribute)));
	
	return types;
}

void WriteProperty(string name, string type)
{
#>
		public <#= type #> <#= name #> { get; set; } 
<#+
}
#>


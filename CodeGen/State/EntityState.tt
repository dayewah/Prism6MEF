<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="$(TargetDir)\CodeGen.dll" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="CodeGen.TestModel" #> 
<#@ import namespace="CodeGen.State" #> 
<#@ include file="$(SolutionDir)\CodeGen\TemplateFileManagerV2.1.ttinclude"		#>
<# 
	//System.Diagnostics.Debugger.Launch();
#>
<#
	var manager = TemplateFileManager.Create(this);
	string fileNamespace = (string)System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");

    foreach (Type modelType in GetModelTypes())
    {
		var className=modelType.Name + "State";
		manager.StartNewFile(className + ".cs");
#>		 
using System; 
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.ObjectModel;

namespace <#= fileNamespace #>
{
	public class <#= className #> 
    {
<#
        foreach (PropertyInfo prop in modelType.GetProperties())
        {
			var name=prop.Name;
			var type=prop.PropertyType;

			var complexType=type.Assembly.FullName.Split(',').First()=="CodeGen";

            if (complexType)
            {
                foreach (PropertyInfo prop2 in type.GetProperties())
                {
					var name2=type.Name + prop2.Name;
					var type2=prop2.PropertyType;
					WriteProperty(name2,type2.Name);
                }
            }
            else
            {
				WriteProperty(name,type.Name);
            }
        }

#>
	}
}
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
<#
    }
manager.Process();
	
#>
<#+
  // Insert any template procedures here

private IEnumerable<Type> GetModelTypes()
{

	List<Assembly> allAssemblies = new List<Assembly>();
	//string file = Assembly.GetExecutingAssembly().Location;

	//string path = @"C:\Dev\VisualStudio\Projects\Prism6MEF\Main\bin\Debug";
	string path = @"C:\Dev\VisualStudio\Projects\Prism6MEF\CodeGen\bin\Debug";
	if(path != "")
		foreach (string dll in Directory.GetFiles(path, "*.dll"))
		{
			if(dll != "")
			{
				allAssemblies.Add(Assembly.LoadFile(dll));
			}
		}

	var aaa= allAssemblies
				.SelectMany(x=>x.GetTypes())
				.Where(x => {
					try 
					{	        
						if (x.Name=="Person")
						{
							var n=2;
						}
						var t=Attribute.IsDefined(x, typeof(GenerateStateAttribute));
						return t;
					}
					catch ( Exception e)
					{
						return false;
					}
				}).ToList();

	var ans=typeof(Person)
			.Assembly
			.GetTypes()
			.Where(x=>Attribute.IsDefined(x, typeof(GenerateStateAttribute)));

	return ans;
}

void WriteProperty(string name, string type)
{
#>
		public <#= type #> <#= name #> { get; set; } 
<#+
}
#>

